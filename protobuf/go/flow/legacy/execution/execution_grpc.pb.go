// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: flow/legacy/execution/execution.proto

package execution

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExecutionAPI_Ping_FullMethodName                   = "/execution.ExecutionAPI/Ping"
	ExecutionAPI_GetAccountAtBlockID_FullMethodName    = "/execution.ExecutionAPI/GetAccountAtBlockID"
	ExecutionAPI_ExecuteScriptAtBlockID_FullMethodName = "/execution.ExecutionAPI/ExecuteScriptAtBlockID"
	ExecutionAPI_GetEventsForBlockIDs_FullMethodName   = "/execution.ExecutionAPI/GetEventsForBlockIDs"
	ExecutionAPI_GetTransactionResult_FullMethodName   = "/execution.ExecutionAPI/GetTransactionResult"
)

// ExecutionAPIClient is the client API for ExecutionAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExecutionAPIClient interface {
	// Ping is used to check if the access node is alive and healthy.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// GetAccountAtBlockID gets an account by address at the given block ID
	GetAccountAtBlockID(ctx context.Context, in *GetAccountAtBlockIDRequest, opts ...grpc.CallOption) (*GetAccountAtBlockIDResponse, error)
	// ExecuteScriptAtBlockID executes a ready-only Cadence script against the
	// execution state at the block with the given ID.
	ExecuteScriptAtBlockID(ctx context.Context, in *ExecuteScriptAtBlockIDRequest, opts ...grpc.CallOption) (*ExecuteScriptAtBlockIDResponse, error)
	// GetEventsForBlockIDs retrieves events for all the specified block IDs that
	// have the given type
	GetEventsForBlockIDs(ctx context.Context, in *GetEventsForBlockIDsRequest, opts ...grpc.CallOption) (*GetEventsForBlockIDsResponse, error)
	// GetTransactionResult gets the result of a transaction.
	GetTransactionResult(ctx context.Context, in *GetTransactionResultRequest, opts ...grpc.CallOption) (*GetTransactionResultResponse, error)
}

type executionAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutionAPIClient(cc grpc.ClientConnInterface) ExecutionAPIClient {
	return &executionAPIClient{cc}
}

func (c *executionAPIClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ExecutionAPI_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionAPIClient) GetAccountAtBlockID(ctx context.Context, in *GetAccountAtBlockIDRequest, opts ...grpc.CallOption) (*GetAccountAtBlockIDResponse, error) {
	out := new(GetAccountAtBlockIDResponse)
	err := c.cc.Invoke(ctx, ExecutionAPI_GetAccountAtBlockID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionAPIClient) ExecuteScriptAtBlockID(ctx context.Context, in *ExecuteScriptAtBlockIDRequest, opts ...grpc.CallOption) (*ExecuteScriptAtBlockIDResponse, error) {
	out := new(ExecuteScriptAtBlockIDResponse)
	err := c.cc.Invoke(ctx, ExecutionAPI_ExecuteScriptAtBlockID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionAPIClient) GetEventsForBlockIDs(ctx context.Context, in *GetEventsForBlockIDsRequest, opts ...grpc.CallOption) (*GetEventsForBlockIDsResponse, error) {
	out := new(GetEventsForBlockIDsResponse)
	err := c.cc.Invoke(ctx, ExecutionAPI_GetEventsForBlockIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionAPIClient) GetTransactionResult(ctx context.Context, in *GetTransactionResultRequest, opts ...grpc.CallOption) (*GetTransactionResultResponse, error) {
	out := new(GetTransactionResultResponse)
	err := c.cc.Invoke(ctx, ExecutionAPI_GetTransactionResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutionAPIServer is the server API for ExecutionAPI service.
// All implementations should embed UnimplementedExecutionAPIServer
// for forward compatibility
type ExecutionAPIServer interface {
	// Ping is used to check if the access node is alive and healthy.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// GetAccountAtBlockID gets an account by address at the given block ID
	GetAccountAtBlockID(context.Context, *GetAccountAtBlockIDRequest) (*GetAccountAtBlockIDResponse, error)
	// ExecuteScriptAtBlockID executes a ready-only Cadence script against the
	// execution state at the block with the given ID.
	ExecuteScriptAtBlockID(context.Context, *ExecuteScriptAtBlockIDRequest) (*ExecuteScriptAtBlockIDResponse, error)
	// GetEventsForBlockIDs retrieves events for all the specified block IDs that
	// have the given type
	GetEventsForBlockIDs(context.Context, *GetEventsForBlockIDsRequest) (*GetEventsForBlockIDsResponse, error)
	// GetTransactionResult gets the result of a transaction.
	GetTransactionResult(context.Context, *GetTransactionResultRequest) (*GetTransactionResultResponse, error)
}

// UnimplementedExecutionAPIServer should be embedded to have forward compatible implementations.
type UnimplementedExecutionAPIServer struct {
}

func (UnimplementedExecutionAPIServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedExecutionAPIServer) GetAccountAtBlockID(context.Context, *GetAccountAtBlockIDRequest) (*GetAccountAtBlockIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountAtBlockID not implemented")
}
func (UnimplementedExecutionAPIServer) ExecuteScriptAtBlockID(context.Context, *ExecuteScriptAtBlockIDRequest) (*ExecuteScriptAtBlockIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteScriptAtBlockID not implemented")
}
func (UnimplementedExecutionAPIServer) GetEventsForBlockIDs(context.Context, *GetEventsForBlockIDsRequest) (*GetEventsForBlockIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsForBlockIDs not implemented")
}
func (UnimplementedExecutionAPIServer) GetTransactionResult(context.Context, *GetTransactionResultRequest) (*GetTransactionResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionResult not implemented")
}

// UnsafeExecutionAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutionAPIServer will
// result in compilation errors.
type UnsafeExecutionAPIServer interface {
	mustEmbedUnimplementedExecutionAPIServer()
}

func RegisterExecutionAPIServer(s grpc.ServiceRegistrar, srv ExecutionAPIServer) {
	s.RegisterService(&ExecutionAPI_ServiceDesc, srv)
}

func _ExecutionAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionAPI_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionAPIServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionAPI_GetAccountAtBlockID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountAtBlockIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionAPIServer).GetAccountAtBlockID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionAPI_GetAccountAtBlockID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionAPIServer).GetAccountAtBlockID(ctx, req.(*GetAccountAtBlockIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionAPI_ExecuteScriptAtBlockID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteScriptAtBlockIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionAPIServer).ExecuteScriptAtBlockID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionAPI_ExecuteScriptAtBlockID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionAPIServer).ExecuteScriptAtBlockID(ctx, req.(*ExecuteScriptAtBlockIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionAPI_GetEventsForBlockIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsForBlockIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionAPIServer).GetEventsForBlockIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionAPI_GetEventsForBlockIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionAPIServer).GetEventsForBlockIDs(ctx, req.(*GetEventsForBlockIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionAPI_GetTransactionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionAPIServer).GetTransactionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionAPI_GetTransactionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionAPIServer).GetTransactionResult(ctx, req.(*GetTransactionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecutionAPI_ServiceDesc is the grpc.ServiceDesc for ExecutionAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutionAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "execution.ExecutionAPI",
	HandlerType: (*ExecutionAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ExecutionAPI_Ping_Handler,
		},
		{
			MethodName: "GetAccountAtBlockID",
			Handler:    _ExecutionAPI_GetAccountAtBlockID_Handler,
		},
		{
			MethodName: "ExecuteScriptAtBlockID",
			Handler:    _ExecutionAPI_ExecuteScriptAtBlockID_Handler,
		},
		{
			MethodName: "GetEventsForBlockIDs",
			Handler:    _ExecutionAPI_GetEventsForBlockIDs_Handler,
		},
		{
			MethodName: "GetTransactionResult",
			Handler:    _ExecutionAPI_GetTransactionResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "flow/legacy/execution/execution.proto",
}
