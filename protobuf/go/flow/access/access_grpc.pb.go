// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: flow/access/access.proto

package access

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccessAPI_Ping_FullMethodName                                  = "/flow.access.AccessAPI/Ping"
	AccessAPI_GetNodeVersionInfo_FullMethodName                    = "/flow.access.AccessAPI/GetNodeVersionInfo"
	AccessAPI_GetLatestBlockHeader_FullMethodName                  = "/flow.access.AccessAPI/GetLatestBlockHeader"
	AccessAPI_GetBlockHeaderByID_FullMethodName                    = "/flow.access.AccessAPI/GetBlockHeaderByID"
	AccessAPI_GetBlockHeaderByHeight_FullMethodName                = "/flow.access.AccessAPI/GetBlockHeaderByHeight"
	AccessAPI_GetLatestBlock_FullMethodName                        = "/flow.access.AccessAPI/GetLatestBlock"
	AccessAPI_GetBlockByID_FullMethodName                          = "/flow.access.AccessAPI/GetBlockByID"
	AccessAPI_GetBlockByHeight_FullMethodName                      = "/flow.access.AccessAPI/GetBlockByHeight"
	AccessAPI_GetCollectionByID_FullMethodName                     = "/flow.access.AccessAPI/GetCollectionByID"
	AccessAPI_GetFullCollectionByID_FullMethodName                 = "/flow.access.AccessAPI/GetFullCollectionByID"
	AccessAPI_SendTransaction_FullMethodName                       = "/flow.access.AccessAPI/SendTransaction"
	AccessAPI_GetTransaction_FullMethodName                        = "/flow.access.AccessAPI/GetTransaction"
	AccessAPI_GetTransactionResult_FullMethodName                  = "/flow.access.AccessAPI/GetTransactionResult"
	AccessAPI_GetTransactionResultByIndex_FullMethodName           = "/flow.access.AccessAPI/GetTransactionResultByIndex"
	AccessAPI_GetTransactionResultsByBlockID_FullMethodName        = "/flow.access.AccessAPI/GetTransactionResultsByBlockID"
	AccessAPI_GetTransactionsByBlockID_FullMethodName              = "/flow.access.AccessAPI/GetTransactionsByBlockID"
	AccessAPI_GetSystemTransaction_FullMethodName                  = "/flow.access.AccessAPI/GetSystemTransaction"
	AccessAPI_GetSystemTransactionResult_FullMethodName            = "/flow.access.AccessAPI/GetSystemTransactionResult"
	AccessAPI_GetAccount_FullMethodName                            = "/flow.access.AccessAPI/GetAccount"
	AccessAPI_GetAccountAtLatestBlock_FullMethodName               = "/flow.access.AccessAPI/GetAccountAtLatestBlock"
	AccessAPI_GetAccountAtBlockHeight_FullMethodName               = "/flow.access.AccessAPI/GetAccountAtBlockHeight"
	AccessAPI_GetAccountBalanceAtLatestBlock_FullMethodName        = "/flow.access.AccessAPI/GetAccountBalanceAtLatestBlock"
	AccessAPI_GetAccountBalanceAtBlockHeight_FullMethodName        = "/flow.access.AccessAPI/GetAccountBalanceAtBlockHeight"
	AccessAPI_GetAccountKeysAtLatestBlock_FullMethodName           = "/flow.access.AccessAPI/GetAccountKeysAtLatestBlock"
	AccessAPI_GetAccountKeysAtBlockHeight_FullMethodName           = "/flow.access.AccessAPI/GetAccountKeysAtBlockHeight"
	AccessAPI_GetAccountKeyAtLatestBlock_FullMethodName            = "/flow.access.AccessAPI/GetAccountKeyAtLatestBlock"
	AccessAPI_GetAccountKeyAtBlockHeight_FullMethodName            = "/flow.access.AccessAPI/GetAccountKeyAtBlockHeight"
	AccessAPI_ExecuteScriptAtLatestBlock_FullMethodName            = "/flow.access.AccessAPI/ExecuteScriptAtLatestBlock"
	AccessAPI_ExecuteScriptAtBlockID_FullMethodName                = "/flow.access.AccessAPI/ExecuteScriptAtBlockID"
	AccessAPI_ExecuteScriptAtBlockHeight_FullMethodName            = "/flow.access.AccessAPI/ExecuteScriptAtBlockHeight"
	AccessAPI_GetEventsForHeightRange_FullMethodName               = "/flow.access.AccessAPI/GetEventsForHeightRange"
	AccessAPI_GetEventsForBlockIDs_FullMethodName                  = "/flow.access.AccessAPI/GetEventsForBlockIDs"
	AccessAPI_GetNetworkParameters_FullMethodName                  = "/flow.access.AccessAPI/GetNetworkParameters"
	AccessAPI_GetLatestProtocolStateSnapshot_FullMethodName        = "/flow.access.AccessAPI/GetLatestProtocolStateSnapshot"
	AccessAPI_GetProtocolStateSnapshotByBlockID_FullMethodName     = "/flow.access.AccessAPI/GetProtocolStateSnapshotByBlockID"
	AccessAPI_GetProtocolStateSnapshotByHeight_FullMethodName      = "/flow.access.AccessAPI/GetProtocolStateSnapshotByHeight"
	AccessAPI_GetExecutionResultForBlockID_FullMethodName          = "/flow.access.AccessAPI/GetExecutionResultForBlockID"
	AccessAPI_GetExecutionResultByID_FullMethodName                = "/flow.access.AccessAPI/GetExecutionResultByID"
	AccessAPI_SubscribeBlocksFromStartBlockID_FullMethodName       = "/flow.access.AccessAPI/SubscribeBlocksFromStartBlockID"
	AccessAPI_SubscribeBlocksFromStartHeight_FullMethodName        = "/flow.access.AccessAPI/SubscribeBlocksFromStartHeight"
	AccessAPI_SubscribeBlocksFromLatest_FullMethodName             = "/flow.access.AccessAPI/SubscribeBlocksFromLatest"
	AccessAPI_SubscribeBlockHeadersFromStartBlockID_FullMethodName = "/flow.access.AccessAPI/SubscribeBlockHeadersFromStartBlockID"
	AccessAPI_SubscribeBlockHeadersFromStartHeight_FullMethodName  = "/flow.access.AccessAPI/SubscribeBlockHeadersFromStartHeight"
	AccessAPI_SubscribeBlockHeadersFromLatest_FullMethodName       = "/flow.access.AccessAPI/SubscribeBlockHeadersFromLatest"
	AccessAPI_SubscribeBlockDigestsFromStartBlockID_FullMethodName = "/flow.access.AccessAPI/SubscribeBlockDigestsFromStartBlockID"
	AccessAPI_SubscribeBlockDigestsFromStartHeight_FullMethodName  = "/flow.access.AccessAPI/SubscribeBlockDigestsFromStartHeight"
	AccessAPI_SubscribeBlockDigestsFromLatest_FullMethodName       = "/flow.access.AccessAPI/SubscribeBlockDigestsFromLatest"
	AccessAPI_SendAndSubscribeTransactionStatuses_FullMethodName   = "/flow.access.AccessAPI/SendAndSubscribeTransactionStatuses"
)

// AccessAPIClient is the client API for AccessAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessAPIClient interface {
	// Ping is used to check if the access node is alive and healthy.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// GetNodeVersionInfo return node version information, such as semver,
	// commit, sporkID and protocol version.
	GetNodeVersionInfo(ctx context.Context, in *GetNodeVersionInfoRequest, opts ...grpc.CallOption) (*GetNodeVersionInfoResponse, error)
	// GetLatestBlockHeader gets the latest sealed or unsealed block header.
	GetLatestBlockHeader(ctx context.Context, in *GetLatestBlockHeaderRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error)
	// GetBlockHeaderByID gets a block header by ID.
	GetBlockHeaderByID(ctx context.Context, in *GetBlockHeaderByIDRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error)
	// GetBlockHeaderByHeight gets a block header by height.
	GetBlockHeaderByHeight(ctx context.Context, in *GetBlockHeaderByHeightRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error)
	// GetLatestBlock gets the full payload of the latest sealed or unsealed
	// block.
	GetLatestBlock(ctx context.Context, in *GetLatestBlockRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// GetBlockByID gets a full block by ID.
	GetBlockByID(ctx context.Context, in *GetBlockByIDRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// GetBlockByHeight gets a full block by height.
	GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// GetCollectionByID gets a collection by ID.
	GetCollectionByID(ctx context.Context, in *GetCollectionByIDRequest, opts ...grpc.CallOption) (*CollectionResponse, error)
	// GetFullCollectionByID gets a collection by ID.
	GetFullCollectionByID(ctx context.Context, in *GetFullCollectionByIDRequest, opts ...grpc.CallOption) (*FullCollectionResponse, error)
	// SendTransaction submits a transaction to the network.
	SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error)
	// GetTransaction gets a transaction by ID.
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// GetTransactionResult gets the result of a transaction.
	GetTransactionResult(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*TransactionResultResponse, error)
	// GetTransactionResultByIndex gets the result of a transaction at a specified
	// block and index
	GetTransactionResultByIndex(ctx context.Context, in *GetTransactionByIndexRequest, opts ...grpc.CallOption) (*TransactionResultResponse, error)
	// GetTransactionResultsByBlockID gets all the transaction results for a
	// specified block
	GetTransactionResultsByBlockID(ctx context.Context, in *GetTransactionsByBlockIDRequest, opts ...grpc.CallOption) (*TransactionResultsResponse, error)
	// GetTransactionsByBlockID gets all the transactions for a specified block
	GetTransactionsByBlockID(ctx context.Context, in *GetTransactionsByBlockIDRequest, opts ...grpc.CallOption) (*TransactionsResponse, error)
	// GetSystemTransaction gets a system transaction
	GetSystemTransaction(ctx context.Context, in *GetSystemTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	// GetSystemTransactionResult gets a system transaction result for a
	// specified block
	GetSystemTransactionResult(ctx context.Context, in *GetSystemTransactionResultRequest, opts ...grpc.CallOption) (*TransactionResultResponse, error)
	// GetAccount is an alias for GetAccountAtLatestBlock.
	//
	// Warning: this function is deprecated. It behaves identically to
	// GetAccountAtLatestBlock and will be removed in a future version.
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// GetAccountAtLatestBlock gets an account by address from the latest sealed
	// execution state.
	GetAccountAtLatestBlock(ctx context.Context, in *GetAccountAtLatestBlockRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	// GetAccountAtBlockHeight gets an account by address at the given block
	// height
	GetAccountAtBlockHeight(ctx context.Context, in *GetAccountAtBlockHeightRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	// GetAccountBalanceAtLatestBlock gets an account balance by address from the latest sealed
	// execution state.
	GetAccountBalanceAtLatestBlock(ctx context.Context, in *GetAccountBalanceAtLatestBlockRequest, opts ...grpc.CallOption) (*AccountBalanceResponse, error)
	// GetAccountBalanceAtBlockHeight gets an account balance by address at the given block
	// height
	GetAccountBalanceAtBlockHeight(ctx context.Context, in *GetAccountBalanceAtBlockHeightRequest, opts ...grpc.CallOption) (*AccountBalanceResponse, error)
	// GetAccountKeysAtLatestBlock gets an account public keys by address from the latest sealed
	// execution state.
	GetAccountKeysAtLatestBlock(ctx context.Context, in *GetAccountKeysAtLatestBlockRequest, opts ...grpc.CallOption) (*AccountKeysResponse, error)
	// GetAccountKeysAtBlockHeight gets an account public keys by address at the given block
	// height
	GetAccountKeysAtBlockHeight(ctx context.Context, in *GetAccountKeysAtBlockHeightRequest, opts ...grpc.CallOption) (*AccountKeysResponse, error)
	// GetAccountKeysAtLatestBlock gets an account public key by address and key index from the latest sealed
	// execution state.
	GetAccountKeyAtLatestBlock(ctx context.Context, in *GetAccountKeyAtLatestBlockRequest, opts ...grpc.CallOption) (*AccountKeyResponse, error)
	// GetAccountKeysAtBlockHeight gets an account public key by address and key index at the given block
	// height
	GetAccountKeyAtBlockHeight(ctx context.Context, in *GetAccountKeyAtBlockHeightRequest, opts ...grpc.CallOption) (*AccountKeyResponse, error)
	// ExecuteScriptAtLatestBlock executes a read-only Cadence script against the
	// latest sealed execution state.
	ExecuteScriptAtLatestBlock(ctx context.Context, in *ExecuteScriptAtLatestBlockRequest, opts ...grpc.CallOption) (*ExecuteScriptResponse, error)
	// ExecuteScriptAtBlockID executes a ready-only Cadence script against the
	// execution state at the block with the given ID.
	ExecuteScriptAtBlockID(ctx context.Context, in *ExecuteScriptAtBlockIDRequest, opts ...grpc.CallOption) (*ExecuteScriptResponse, error)
	// ExecuteScriptAtBlockHeight executes a ready-only Cadence script against the
	// execution state at the given block height.
	ExecuteScriptAtBlockHeight(ctx context.Context, in *ExecuteScriptAtBlockHeightRequest, opts ...grpc.CallOption) (*ExecuteScriptResponse, error)
	// GetEventsForHeightRange retrieves events emitted within the specified block
	// range.
	GetEventsForHeightRange(ctx context.Context, in *GetEventsForHeightRangeRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	// GetEventsForBlockIDs retrieves events for the specified block IDs and event
	// type.
	GetEventsForBlockIDs(ctx context.Context, in *GetEventsForBlockIDsRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	// GetNetworkParameters retrieves the Flow network details
	GetNetworkParameters(ctx context.Context, in *GetNetworkParametersRequest, opts ...grpc.CallOption) (*GetNetworkParametersResponse, error)
	// GetLatestProtocolStateSnapshot retrieves the latest sealed protocol state
	// snapshot. Used by Flow nodes joining the network to bootstrap a
	// space-efficient local state.
	GetLatestProtocolStateSnapshot(ctx context.Context, in *GetLatestProtocolStateSnapshotRequest, opts ...grpc.CallOption) (*ProtocolStateSnapshotResponse, error)
	// GetProtocolStateSnapshotByBlockID retrieves the latest sealed protocol state
	// snapshot by block ID. Used by Flow nodes joining the network to bootstrap a
	// space-efficient local state.
	GetProtocolStateSnapshotByBlockID(ctx context.Context, in *GetProtocolStateSnapshotByBlockIDRequest, opts ...grpc.CallOption) (*ProtocolStateSnapshotResponse, error)
	// GetProtocolStateSnapshotByHeight retrieves the latest sealed protocol state
	// snapshot by block height. Used by Flow nodes joining the network to bootstrap a
	// space-efficient local state.
	GetProtocolStateSnapshotByHeight(ctx context.Context, in *GetProtocolStateSnapshotByHeightRequest, opts ...grpc.CallOption) (*ProtocolStateSnapshotResponse, error)
	// GetExecutionResultForBlockID returns Execution Result for a given block.
	// At present, Access Node might not have execution results for every block
	// and as usual, until sealed, this data can change
	GetExecutionResultForBlockID(ctx context.Context, in *GetExecutionResultForBlockIDRequest, opts ...grpc.CallOption) (*ExecutionResultForBlockIDResponse, error)
	// GetExecutionResultByID returns Execution Result by its ID.
	GetExecutionResultByID(ctx context.Context, in *GetExecutionResultByIDRequest, opts ...grpc.CallOption) (*ExecutionResultByIDResponse, error)
	// SubscribeBlocksFromStartBlockID streams finalized or sealed blocks starting at the requested
	// start block id, up until the latest available block. Once the latest is
	// reached, the stream will remain open and responses are sent for each new
	// block as it becomes available.
	//
	// Blocks are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed blocks will be returned.
	SubscribeBlocksFromStartBlockID(ctx context.Context, in *SubscribeBlocksFromStartBlockIDRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlocksFromStartBlockIDClient, error)
	// SubscribeBlocksFromStartHeight streams finalized or sealed blocks starting at the requested
	// start block height, up until the latest available block. Once the latest is
	// reached, the stream will remain open and responses are sent for each new
	// block as it becomes available.
	//
	// Blocks are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed blocks will be returned.
	SubscribeBlocksFromStartHeight(ctx context.Context, in *SubscribeBlocksFromStartHeightRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlocksFromStartHeightClient, error)
	// SubscribeBlocksFromLatest streams finalized or sealed blocks starting from the latest finalized or sealed
	// block. The stream will remain open and responses are sent for each new block as it becomes available.
	//
	// Blocks are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed blocks will be returned.
	SubscribeBlocksFromLatest(ctx context.Context, in *SubscribeBlocksFromLatestRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlocksFromLatestClient, error)
	// SubscribeBlockHeadersFromStartBlockID streams finalized or sealed block headers starting at the requested
	// start block id, up until the latest available block. Once the latest is
	// reached, the stream will remain open and responses are sent for each new
	// block header as it becomes available.
	//
	// Block headers are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed block headers will be returned.
	SubscribeBlockHeadersFromStartBlockID(ctx context.Context, in *SubscribeBlockHeadersFromStartBlockIDRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlockHeadersFromStartBlockIDClient, error)
	// SubscribeBlockHeadersFromStartHeight streams finalized or sealed block headers starting at the requested
	// start block height, up until the latest available block. Once the latest is
	// reached, the stream will remain open and responses are sent for each new
	// block header as it becomes available.
	//
	// Block headers are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed block headers will be returned.
	SubscribeBlockHeadersFromStartHeight(ctx context.Context, in *SubscribeBlockHeadersFromStartHeightRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlockHeadersFromStartHeightClient, error)
	// SubscribeBlockHeadersFromLatest streams finalized or sealed block headers starting from the latest finalized or sealed
	// block. The stream will remain open and responses are sent for each new block header as it becomes available.
	//
	// Block headers are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed block headers will be returned.
	SubscribeBlockHeadersFromLatest(ctx context.Context, in *SubscribeBlockHeadersFromLatestRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlockHeadersFromLatestClient, error)
	// SubscribeBlockDigestsFromStartBlockID streams finalized or sealed lightweight block starting at the requested
	// start block id, up until the latest available block. Once the latest is
	// reached, the stream will remain open and responses are sent for each new
	// lightweight block as it becomes available.
	//
	// Lightweight blocks are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed lightweight blocks will be returned.
	SubscribeBlockDigestsFromStartBlockID(ctx context.Context, in *SubscribeBlockDigestsFromStartBlockIDRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlockDigestsFromStartBlockIDClient, error)
	// SubscribeBlockDigestsFromStartHeight streams finalized or sealed lightweight block starting at the requested
	// start block height, up until the latest available block. Once the latest is
	// reached, the stream will remain open and responses are sent for each new
	// lightweight block as it becomes available.
	//
	// Lightweight blocks are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed lightweight blocks will be returned.
	SubscribeBlockDigestsFromStartHeight(ctx context.Context, in *SubscribeBlockDigestsFromStartHeightRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlockDigestsFromStartHeightClient, error)
	// SubscribeBlockDigestsFromLatest streams finalized or sealed lightweight block headers starting of the latest finalized or sealed
	// block. The stream will remain open and responses are sent for each new lightweight block as it becomes available.
	//
	// Lightweight blocks are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed lightweight blocks will be returned.
	SubscribeBlockDigestsFromLatest(ctx context.Context, in *SubscribeBlockDigestsFromLatestRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlockDigestsFromLatestClient, error)
	// SendAndSubscribeTransactionStatuses send a transaction and immediately subscribe to its status changes. The status
	// is streamed back until the block containing the transaction becomes sealed.
	SendAndSubscribeTransactionStatuses(ctx context.Context, in *SendAndSubscribeTransactionStatusesRequest, opts ...grpc.CallOption) (AccessAPI_SendAndSubscribeTransactionStatusesClient, error)
}

type accessAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessAPIClient(cc grpc.ClientConnInterface) AccessAPIClient {
	return &accessAPIClient{cc}
}

func (c *accessAPIClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, AccessAPI_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetNodeVersionInfo(ctx context.Context, in *GetNodeVersionInfoRequest, opts ...grpc.CallOption) (*GetNodeVersionInfoResponse, error) {
	out := new(GetNodeVersionInfoResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetNodeVersionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetLatestBlockHeader(ctx context.Context, in *GetLatestBlockHeaderRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error) {
	out := new(BlockHeaderResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetLatestBlockHeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetBlockHeaderByID(ctx context.Context, in *GetBlockHeaderByIDRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error) {
	out := new(BlockHeaderResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetBlockHeaderByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetBlockHeaderByHeight(ctx context.Context, in *GetBlockHeaderByHeightRequest, opts ...grpc.CallOption) (*BlockHeaderResponse, error) {
	out := new(BlockHeaderResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetBlockHeaderByHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetLatestBlock(ctx context.Context, in *GetLatestBlockRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetLatestBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetBlockByID(ctx context.Context, in *GetBlockByIDRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetBlockByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetBlockByHeight(ctx context.Context, in *GetBlockByHeightRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetBlockByHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetCollectionByID(ctx context.Context, in *GetCollectionByIDRequest, opts ...grpc.CallOption) (*CollectionResponse, error) {
	out := new(CollectionResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetCollectionByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetFullCollectionByID(ctx context.Context, in *GetFullCollectionByIDRequest, opts ...grpc.CallOption) (*FullCollectionResponse, error) {
	out := new(FullCollectionResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetFullCollectionByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) SendTransaction(ctx context.Context, in *SendTransactionRequest, opts ...grpc.CallOption) (*SendTransactionResponse, error) {
	out := new(SendTransactionResponse)
	err := c.cc.Invoke(ctx, AccessAPI_SendTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetTransactionResult(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*TransactionResultResponse, error) {
	out := new(TransactionResultResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetTransactionResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetTransactionResultByIndex(ctx context.Context, in *GetTransactionByIndexRequest, opts ...grpc.CallOption) (*TransactionResultResponse, error) {
	out := new(TransactionResultResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetTransactionResultByIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetTransactionResultsByBlockID(ctx context.Context, in *GetTransactionsByBlockIDRequest, opts ...grpc.CallOption) (*TransactionResultsResponse, error) {
	out := new(TransactionResultsResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetTransactionResultsByBlockID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetTransactionsByBlockID(ctx context.Context, in *GetTransactionsByBlockIDRequest, opts ...grpc.CallOption) (*TransactionsResponse, error) {
	out := new(TransactionsResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetTransactionsByBlockID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetSystemTransaction(ctx context.Context, in *GetSystemTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetSystemTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetSystemTransactionResult(ctx context.Context, in *GetSystemTransactionResultRequest, opts ...grpc.CallOption) (*TransactionResultResponse, error) {
	out := new(TransactionResultResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetSystemTransactionResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetAccountAtLatestBlock(ctx context.Context, in *GetAccountAtLatestBlockRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetAccountAtLatestBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetAccountAtBlockHeight(ctx context.Context, in *GetAccountAtBlockHeightRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetAccountAtBlockHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetAccountBalanceAtLatestBlock(ctx context.Context, in *GetAccountBalanceAtLatestBlockRequest, opts ...grpc.CallOption) (*AccountBalanceResponse, error) {
	out := new(AccountBalanceResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetAccountBalanceAtLatestBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetAccountBalanceAtBlockHeight(ctx context.Context, in *GetAccountBalanceAtBlockHeightRequest, opts ...grpc.CallOption) (*AccountBalanceResponse, error) {
	out := new(AccountBalanceResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetAccountBalanceAtBlockHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetAccountKeysAtLatestBlock(ctx context.Context, in *GetAccountKeysAtLatestBlockRequest, opts ...grpc.CallOption) (*AccountKeysResponse, error) {
	out := new(AccountKeysResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetAccountKeysAtLatestBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetAccountKeysAtBlockHeight(ctx context.Context, in *GetAccountKeysAtBlockHeightRequest, opts ...grpc.CallOption) (*AccountKeysResponse, error) {
	out := new(AccountKeysResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetAccountKeysAtBlockHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetAccountKeyAtLatestBlock(ctx context.Context, in *GetAccountKeyAtLatestBlockRequest, opts ...grpc.CallOption) (*AccountKeyResponse, error) {
	out := new(AccountKeyResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetAccountKeyAtLatestBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetAccountKeyAtBlockHeight(ctx context.Context, in *GetAccountKeyAtBlockHeightRequest, opts ...grpc.CallOption) (*AccountKeyResponse, error) {
	out := new(AccountKeyResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetAccountKeyAtBlockHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) ExecuteScriptAtLatestBlock(ctx context.Context, in *ExecuteScriptAtLatestBlockRequest, opts ...grpc.CallOption) (*ExecuteScriptResponse, error) {
	out := new(ExecuteScriptResponse)
	err := c.cc.Invoke(ctx, AccessAPI_ExecuteScriptAtLatestBlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) ExecuteScriptAtBlockID(ctx context.Context, in *ExecuteScriptAtBlockIDRequest, opts ...grpc.CallOption) (*ExecuteScriptResponse, error) {
	out := new(ExecuteScriptResponse)
	err := c.cc.Invoke(ctx, AccessAPI_ExecuteScriptAtBlockID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) ExecuteScriptAtBlockHeight(ctx context.Context, in *ExecuteScriptAtBlockHeightRequest, opts ...grpc.CallOption) (*ExecuteScriptResponse, error) {
	out := new(ExecuteScriptResponse)
	err := c.cc.Invoke(ctx, AccessAPI_ExecuteScriptAtBlockHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetEventsForHeightRange(ctx context.Context, in *GetEventsForHeightRangeRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetEventsForHeightRange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetEventsForBlockIDs(ctx context.Context, in *GetEventsForBlockIDsRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetEventsForBlockIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetNetworkParameters(ctx context.Context, in *GetNetworkParametersRequest, opts ...grpc.CallOption) (*GetNetworkParametersResponse, error) {
	out := new(GetNetworkParametersResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetNetworkParameters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetLatestProtocolStateSnapshot(ctx context.Context, in *GetLatestProtocolStateSnapshotRequest, opts ...grpc.CallOption) (*ProtocolStateSnapshotResponse, error) {
	out := new(ProtocolStateSnapshotResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetLatestProtocolStateSnapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetProtocolStateSnapshotByBlockID(ctx context.Context, in *GetProtocolStateSnapshotByBlockIDRequest, opts ...grpc.CallOption) (*ProtocolStateSnapshotResponse, error) {
	out := new(ProtocolStateSnapshotResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetProtocolStateSnapshotByBlockID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetProtocolStateSnapshotByHeight(ctx context.Context, in *GetProtocolStateSnapshotByHeightRequest, opts ...grpc.CallOption) (*ProtocolStateSnapshotResponse, error) {
	out := new(ProtocolStateSnapshotResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetProtocolStateSnapshotByHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetExecutionResultForBlockID(ctx context.Context, in *GetExecutionResultForBlockIDRequest, opts ...grpc.CallOption) (*ExecutionResultForBlockIDResponse, error) {
	out := new(ExecutionResultForBlockIDResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetExecutionResultForBlockID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) GetExecutionResultByID(ctx context.Context, in *GetExecutionResultByIDRequest, opts ...grpc.CallOption) (*ExecutionResultByIDResponse, error) {
	out := new(ExecutionResultByIDResponse)
	err := c.cc.Invoke(ctx, AccessAPI_GetExecutionResultByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessAPIClient) SubscribeBlocksFromStartBlockID(ctx context.Context, in *SubscribeBlocksFromStartBlockIDRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlocksFromStartBlockIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccessAPI_ServiceDesc.Streams[0], AccessAPI_SubscribeBlocksFromStartBlockID_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accessAPISubscribeBlocksFromStartBlockIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccessAPI_SubscribeBlocksFromStartBlockIDClient interface {
	Recv() (*SubscribeBlocksResponse, error)
	grpc.ClientStream
}

type accessAPISubscribeBlocksFromStartBlockIDClient struct {
	grpc.ClientStream
}

func (x *accessAPISubscribeBlocksFromStartBlockIDClient) Recv() (*SubscribeBlocksResponse, error) {
	m := new(SubscribeBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accessAPIClient) SubscribeBlocksFromStartHeight(ctx context.Context, in *SubscribeBlocksFromStartHeightRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlocksFromStartHeightClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccessAPI_ServiceDesc.Streams[1], AccessAPI_SubscribeBlocksFromStartHeight_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accessAPISubscribeBlocksFromStartHeightClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccessAPI_SubscribeBlocksFromStartHeightClient interface {
	Recv() (*SubscribeBlocksResponse, error)
	grpc.ClientStream
}

type accessAPISubscribeBlocksFromStartHeightClient struct {
	grpc.ClientStream
}

func (x *accessAPISubscribeBlocksFromStartHeightClient) Recv() (*SubscribeBlocksResponse, error) {
	m := new(SubscribeBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accessAPIClient) SubscribeBlocksFromLatest(ctx context.Context, in *SubscribeBlocksFromLatestRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlocksFromLatestClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccessAPI_ServiceDesc.Streams[2], AccessAPI_SubscribeBlocksFromLatest_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accessAPISubscribeBlocksFromLatestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccessAPI_SubscribeBlocksFromLatestClient interface {
	Recv() (*SubscribeBlocksResponse, error)
	grpc.ClientStream
}

type accessAPISubscribeBlocksFromLatestClient struct {
	grpc.ClientStream
}

func (x *accessAPISubscribeBlocksFromLatestClient) Recv() (*SubscribeBlocksResponse, error) {
	m := new(SubscribeBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accessAPIClient) SubscribeBlockHeadersFromStartBlockID(ctx context.Context, in *SubscribeBlockHeadersFromStartBlockIDRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlockHeadersFromStartBlockIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccessAPI_ServiceDesc.Streams[3], AccessAPI_SubscribeBlockHeadersFromStartBlockID_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accessAPISubscribeBlockHeadersFromStartBlockIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccessAPI_SubscribeBlockHeadersFromStartBlockIDClient interface {
	Recv() (*SubscribeBlockHeadersResponse, error)
	grpc.ClientStream
}

type accessAPISubscribeBlockHeadersFromStartBlockIDClient struct {
	grpc.ClientStream
}

func (x *accessAPISubscribeBlockHeadersFromStartBlockIDClient) Recv() (*SubscribeBlockHeadersResponse, error) {
	m := new(SubscribeBlockHeadersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accessAPIClient) SubscribeBlockHeadersFromStartHeight(ctx context.Context, in *SubscribeBlockHeadersFromStartHeightRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlockHeadersFromStartHeightClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccessAPI_ServiceDesc.Streams[4], AccessAPI_SubscribeBlockHeadersFromStartHeight_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accessAPISubscribeBlockHeadersFromStartHeightClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccessAPI_SubscribeBlockHeadersFromStartHeightClient interface {
	Recv() (*SubscribeBlockHeadersResponse, error)
	grpc.ClientStream
}

type accessAPISubscribeBlockHeadersFromStartHeightClient struct {
	grpc.ClientStream
}

func (x *accessAPISubscribeBlockHeadersFromStartHeightClient) Recv() (*SubscribeBlockHeadersResponse, error) {
	m := new(SubscribeBlockHeadersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accessAPIClient) SubscribeBlockHeadersFromLatest(ctx context.Context, in *SubscribeBlockHeadersFromLatestRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlockHeadersFromLatestClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccessAPI_ServiceDesc.Streams[5], AccessAPI_SubscribeBlockHeadersFromLatest_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accessAPISubscribeBlockHeadersFromLatestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccessAPI_SubscribeBlockHeadersFromLatestClient interface {
	Recv() (*SubscribeBlockHeadersResponse, error)
	grpc.ClientStream
}

type accessAPISubscribeBlockHeadersFromLatestClient struct {
	grpc.ClientStream
}

func (x *accessAPISubscribeBlockHeadersFromLatestClient) Recv() (*SubscribeBlockHeadersResponse, error) {
	m := new(SubscribeBlockHeadersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accessAPIClient) SubscribeBlockDigestsFromStartBlockID(ctx context.Context, in *SubscribeBlockDigestsFromStartBlockIDRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlockDigestsFromStartBlockIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccessAPI_ServiceDesc.Streams[6], AccessAPI_SubscribeBlockDigestsFromStartBlockID_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accessAPISubscribeBlockDigestsFromStartBlockIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccessAPI_SubscribeBlockDigestsFromStartBlockIDClient interface {
	Recv() (*SubscribeBlockDigestsResponse, error)
	grpc.ClientStream
}

type accessAPISubscribeBlockDigestsFromStartBlockIDClient struct {
	grpc.ClientStream
}

func (x *accessAPISubscribeBlockDigestsFromStartBlockIDClient) Recv() (*SubscribeBlockDigestsResponse, error) {
	m := new(SubscribeBlockDigestsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accessAPIClient) SubscribeBlockDigestsFromStartHeight(ctx context.Context, in *SubscribeBlockDigestsFromStartHeightRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlockDigestsFromStartHeightClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccessAPI_ServiceDesc.Streams[7], AccessAPI_SubscribeBlockDigestsFromStartHeight_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accessAPISubscribeBlockDigestsFromStartHeightClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccessAPI_SubscribeBlockDigestsFromStartHeightClient interface {
	Recv() (*SubscribeBlockDigestsResponse, error)
	grpc.ClientStream
}

type accessAPISubscribeBlockDigestsFromStartHeightClient struct {
	grpc.ClientStream
}

func (x *accessAPISubscribeBlockDigestsFromStartHeightClient) Recv() (*SubscribeBlockDigestsResponse, error) {
	m := new(SubscribeBlockDigestsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accessAPIClient) SubscribeBlockDigestsFromLatest(ctx context.Context, in *SubscribeBlockDigestsFromLatestRequest, opts ...grpc.CallOption) (AccessAPI_SubscribeBlockDigestsFromLatestClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccessAPI_ServiceDesc.Streams[8], AccessAPI_SubscribeBlockDigestsFromLatest_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accessAPISubscribeBlockDigestsFromLatestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccessAPI_SubscribeBlockDigestsFromLatestClient interface {
	Recv() (*SubscribeBlockDigestsResponse, error)
	grpc.ClientStream
}

type accessAPISubscribeBlockDigestsFromLatestClient struct {
	grpc.ClientStream
}

func (x *accessAPISubscribeBlockDigestsFromLatestClient) Recv() (*SubscribeBlockDigestsResponse, error) {
	m := new(SubscribeBlockDigestsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accessAPIClient) SendAndSubscribeTransactionStatuses(ctx context.Context, in *SendAndSubscribeTransactionStatusesRequest, opts ...grpc.CallOption) (AccessAPI_SendAndSubscribeTransactionStatusesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccessAPI_ServiceDesc.Streams[9], AccessAPI_SendAndSubscribeTransactionStatuses_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accessAPISendAndSubscribeTransactionStatusesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccessAPI_SendAndSubscribeTransactionStatusesClient interface {
	Recv() (*SendAndSubscribeTransactionStatusesResponse, error)
	grpc.ClientStream
}

type accessAPISendAndSubscribeTransactionStatusesClient struct {
	grpc.ClientStream
}

func (x *accessAPISendAndSubscribeTransactionStatusesClient) Recv() (*SendAndSubscribeTransactionStatusesResponse, error) {
	m := new(SendAndSubscribeTransactionStatusesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AccessAPIServer is the server API for AccessAPI service.
// All implementations should embed UnimplementedAccessAPIServer
// for forward compatibility
type AccessAPIServer interface {
	// Ping is used to check if the access node is alive and healthy.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// GetNodeVersionInfo return node version information, such as semver,
	// commit, sporkID and protocol version.
	GetNodeVersionInfo(context.Context, *GetNodeVersionInfoRequest) (*GetNodeVersionInfoResponse, error)
	// GetLatestBlockHeader gets the latest sealed or unsealed block header.
	GetLatestBlockHeader(context.Context, *GetLatestBlockHeaderRequest) (*BlockHeaderResponse, error)
	// GetBlockHeaderByID gets a block header by ID.
	GetBlockHeaderByID(context.Context, *GetBlockHeaderByIDRequest) (*BlockHeaderResponse, error)
	// GetBlockHeaderByHeight gets a block header by height.
	GetBlockHeaderByHeight(context.Context, *GetBlockHeaderByHeightRequest) (*BlockHeaderResponse, error)
	// GetLatestBlock gets the full payload of the latest sealed or unsealed
	// block.
	GetLatestBlock(context.Context, *GetLatestBlockRequest) (*BlockResponse, error)
	// GetBlockByID gets a full block by ID.
	GetBlockByID(context.Context, *GetBlockByIDRequest) (*BlockResponse, error)
	// GetBlockByHeight gets a full block by height.
	GetBlockByHeight(context.Context, *GetBlockByHeightRequest) (*BlockResponse, error)
	// GetCollectionByID gets a collection by ID.
	GetCollectionByID(context.Context, *GetCollectionByIDRequest) (*CollectionResponse, error)
	// GetFullCollectionByID gets a collection by ID.
	GetFullCollectionByID(context.Context, *GetFullCollectionByIDRequest) (*FullCollectionResponse, error)
	// SendTransaction submits a transaction to the network.
	SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error)
	// GetTransaction gets a transaction by ID.
	GetTransaction(context.Context, *GetTransactionRequest) (*TransactionResponse, error)
	// GetTransactionResult gets the result of a transaction.
	GetTransactionResult(context.Context, *GetTransactionRequest) (*TransactionResultResponse, error)
	// GetTransactionResultByIndex gets the result of a transaction at a specified
	// block and index
	GetTransactionResultByIndex(context.Context, *GetTransactionByIndexRequest) (*TransactionResultResponse, error)
	// GetTransactionResultsByBlockID gets all the transaction results for a
	// specified block
	GetTransactionResultsByBlockID(context.Context, *GetTransactionsByBlockIDRequest) (*TransactionResultsResponse, error)
	// GetTransactionsByBlockID gets all the transactions for a specified block
	GetTransactionsByBlockID(context.Context, *GetTransactionsByBlockIDRequest) (*TransactionsResponse, error)
	// GetSystemTransaction gets a system transaction
	GetSystemTransaction(context.Context, *GetSystemTransactionRequest) (*TransactionResponse, error)
	// GetSystemTransactionResult gets a system transaction result for a
	// specified block
	GetSystemTransactionResult(context.Context, *GetSystemTransactionResultRequest) (*TransactionResultResponse, error)
	// GetAccount is an alias for GetAccountAtLatestBlock.
	//
	// Warning: this function is deprecated. It behaves identically to
	// GetAccountAtLatestBlock and will be removed in a future version.
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// GetAccountAtLatestBlock gets an account by address from the latest sealed
	// execution state.
	GetAccountAtLatestBlock(context.Context, *GetAccountAtLatestBlockRequest) (*AccountResponse, error)
	// GetAccountAtBlockHeight gets an account by address at the given block
	// height
	GetAccountAtBlockHeight(context.Context, *GetAccountAtBlockHeightRequest) (*AccountResponse, error)
	// GetAccountBalanceAtLatestBlock gets an account balance by address from the latest sealed
	// execution state.
	GetAccountBalanceAtLatestBlock(context.Context, *GetAccountBalanceAtLatestBlockRequest) (*AccountBalanceResponse, error)
	// GetAccountBalanceAtBlockHeight gets an account balance by address at the given block
	// height
	GetAccountBalanceAtBlockHeight(context.Context, *GetAccountBalanceAtBlockHeightRequest) (*AccountBalanceResponse, error)
	// GetAccountKeysAtLatestBlock gets an account public keys by address from the latest sealed
	// execution state.
	GetAccountKeysAtLatestBlock(context.Context, *GetAccountKeysAtLatestBlockRequest) (*AccountKeysResponse, error)
	// GetAccountKeysAtBlockHeight gets an account public keys by address at the given block
	// height
	GetAccountKeysAtBlockHeight(context.Context, *GetAccountKeysAtBlockHeightRequest) (*AccountKeysResponse, error)
	// GetAccountKeysAtLatestBlock gets an account public key by address and key index from the latest sealed
	// execution state.
	GetAccountKeyAtLatestBlock(context.Context, *GetAccountKeyAtLatestBlockRequest) (*AccountKeyResponse, error)
	// GetAccountKeysAtBlockHeight gets an account public key by address and key index at the given block
	// height
	GetAccountKeyAtBlockHeight(context.Context, *GetAccountKeyAtBlockHeightRequest) (*AccountKeyResponse, error)
	// ExecuteScriptAtLatestBlock executes a read-only Cadence script against the
	// latest sealed execution state.
	ExecuteScriptAtLatestBlock(context.Context, *ExecuteScriptAtLatestBlockRequest) (*ExecuteScriptResponse, error)
	// ExecuteScriptAtBlockID executes a ready-only Cadence script against the
	// execution state at the block with the given ID.
	ExecuteScriptAtBlockID(context.Context, *ExecuteScriptAtBlockIDRequest) (*ExecuteScriptResponse, error)
	// ExecuteScriptAtBlockHeight executes a ready-only Cadence script against the
	// execution state at the given block height.
	ExecuteScriptAtBlockHeight(context.Context, *ExecuteScriptAtBlockHeightRequest) (*ExecuteScriptResponse, error)
	// GetEventsForHeightRange retrieves events emitted within the specified block
	// range.
	GetEventsForHeightRange(context.Context, *GetEventsForHeightRangeRequest) (*EventsResponse, error)
	// GetEventsForBlockIDs retrieves events for the specified block IDs and event
	// type.
	GetEventsForBlockIDs(context.Context, *GetEventsForBlockIDsRequest) (*EventsResponse, error)
	// GetNetworkParameters retrieves the Flow network details
	GetNetworkParameters(context.Context, *GetNetworkParametersRequest) (*GetNetworkParametersResponse, error)
	// GetLatestProtocolStateSnapshot retrieves the latest sealed protocol state
	// snapshot. Used by Flow nodes joining the network to bootstrap a
	// space-efficient local state.
	GetLatestProtocolStateSnapshot(context.Context, *GetLatestProtocolStateSnapshotRequest) (*ProtocolStateSnapshotResponse, error)
	// GetProtocolStateSnapshotByBlockID retrieves the latest sealed protocol state
	// snapshot by block ID. Used by Flow nodes joining the network to bootstrap a
	// space-efficient local state.
	GetProtocolStateSnapshotByBlockID(context.Context, *GetProtocolStateSnapshotByBlockIDRequest) (*ProtocolStateSnapshotResponse, error)
	// GetProtocolStateSnapshotByHeight retrieves the latest sealed protocol state
	// snapshot by block height. Used by Flow nodes joining the network to bootstrap a
	// space-efficient local state.
	GetProtocolStateSnapshotByHeight(context.Context, *GetProtocolStateSnapshotByHeightRequest) (*ProtocolStateSnapshotResponse, error)
	// GetExecutionResultForBlockID returns Execution Result for a given block.
	// At present, Access Node might not have execution results for every block
	// and as usual, until sealed, this data can change
	GetExecutionResultForBlockID(context.Context, *GetExecutionResultForBlockIDRequest) (*ExecutionResultForBlockIDResponse, error)
	// GetExecutionResultByID returns Execution Result by its ID.
	GetExecutionResultByID(context.Context, *GetExecutionResultByIDRequest) (*ExecutionResultByIDResponse, error)
	// SubscribeBlocksFromStartBlockID streams finalized or sealed blocks starting at the requested
	// start block id, up until the latest available block. Once the latest is
	// reached, the stream will remain open and responses are sent for each new
	// block as it becomes available.
	//
	// Blocks are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed blocks will be returned.
	SubscribeBlocksFromStartBlockID(*SubscribeBlocksFromStartBlockIDRequest, AccessAPI_SubscribeBlocksFromStartBlockIDServer) error
	// SubscribeBlocksFromStartHeight streams finalized or sealed blocks starting at the requested
	// start block height, up until the latest available block. Once the latest is
	// reached, the stream will remain open and responses are sent for each new
	// block as it becomes available.
	//
	// Blocks are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed blocks will be returned.
	SubscribeBlocksFromStartHeight(*SubscribeBlocksFromStartHeightRequest, AccessAPI_SubscribeBlocksFromStartHeightServer) error
	// SubscribeBlocksFromLatest streams finalized or sealed blocks starting from the latest finalized or sealed
	// block. The stream will remain open and responses are sent for each new block as it becomes available.
	//
	// Blocks are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed blocks will be returned.
	SubscribeBlocksFromLatest(*SubscribeBlocksFromLatestRequest, AccessAPI_SubscribeBlocksFromLatestServer) error
	// SubscribeBlockHeadersFromStartBlockID streams finalized or sealed block headers starting at the requested
	// start block id, up until the latest available block. Once the latest is
	// reached, the stream will remain open and responses are sent for each new
	// block header as it becomes available.
	//
	// Block headers are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed block headers will be returned.
	SubscribeBlockHeadersFromStartBlockID(*SubscribeBlockHeadersFromStartBlockIDRequest, AccessAPI_SubscribeBlockHeadersFromStartBlockIDServer) error
	// SubscribeBlockHeadersFromStartHeight streams finalized or sealed block headers starting at the requested
	// start block height, up until the latest available block. Once the latest is
	// reached, the stream will remain open and responses are sent for each new
	// block header as it becomes available.
	//
	// Block headers are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed block headers will be returned.
	SubscribeBlockHeadersFromStartHeight(*SubscribeBlockHeadersFromStartHeightRequest, AccessAPI_SubscribeBlockHeadersFromStartHeightServer) error
	// SubscribeBlockHeadersFromLatest streams finalized or sealed block headers starting from the latest finalized or sealed
	// block. The stream will remain open and responses are sent for each new block header as it becomes available.
	//
	// Block headers are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed block headers will be returned.
	SubscribeBlockHeadersFromLatest(*SubscribeBlockHeadersFromLatestRequest, AccessAPI_SubscribeBlockHeadersFromLatestServer) error
	// SubscribeBlockDigestsFromStartBlockID streams finalized or sealed lightweight block starting at the requested
	// start block id, up until the latest available block. Once the latest is
	// reached, the stream will remain open and responses are sent for each new
	// lightweight block as it becomes available.
	//
	// Lightweight blocks are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed lightweight blocks will be returned.
	SubscribeBlockDigestsFromStartBlockID(*SubscribeBlockDigestsFromStartBlockIDRequest, AccessAPI_SubscribeBlockDigestsFromStartBlockIDServer) error
	// SubscribeBlockDigestsFromStartHeight streams finalized or sealed lightweight block starting at the requested
	// start block height, up until the latest available block. Once the latest is
	// reached, the stream will remain open and responses are sent for each new
	// lightweight block as it becomes available.
	//
	// Lightweight blocks are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed lightweight blocks will be returned.
	SubscribeBlockDigestsFromStartHeight(*SubscribeBlockDigestsFromStartHeightRequest, AccessAPI_SubscribeBlockDigestsFromStartHeightServer) error
	// SubscribeBlockDigestsFromLatest streams finalized or sealed lightweight block headers starting of the latest finalized or sealed
	// block. The stream will remain open and responses are sent for each new lightweight block as it becomes available.
	//
	// Lightweight blocks are only returned when they have reached the provided block status. For example,
	// if the status is "sealed", only sealed lightweight blocks will be returned.
	SubscribeBlockDigestsFromLatest(*SubscribeBlockDigestsFromLatestRequest, AccessAPI_SubscribeBlockDigestsFromLatestServer) error
	// SendAndSubscribeTransactionStatuses send a transaction and immediately subscribe to its status changes. The status
	// is streamed back until the block containing the transaction becomes sealed.
	SendAndSubscribeTransactionStatuses(*SendAndSubscribeTransactionStatusesRequest, AccessAPI_SendAndSubscribeTransactionStatusesServer) error
}

// UnimplementedAccessAPIServer should be embedded to have forward compatible implementations.
type UnimplementedAccessAPIServer struct {
}

func (UnimplementedAccessAPIServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAccessAPIServer) GetNodeVersionInfo(context.Context, *GetNodeVersionInfoRequest) (*GetNodeVersionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeVersionInfo not implemented")
}
func (UnimplementedAccessAPIServer) GetLatestBlockHeader(context.Context, *GetLatestBlockHeaderRequest) (*BlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlockHeader not implemented")
}
func (UnimplementedAccessAPIServer) GetBlockHeaderByID(context.Context, *GetBlockHeaderByIDRequest) (*BlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeaderByID not implemented")
}
func (UnimplementedAccessAPIServer) GetBlockHeaderByHeight(context.Context, *GetBlockHeaderByHeightRequest) (*BlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeaderByHeight not implemented")
}
func (UnimplementedAccessAPIServer) GetLatestBlock(context.Context, *GetLatestBlockRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlock not implemented")
}
func (UnimplementedAccessAPIServer) GetBlockByID(context.Context, *GetBlockByIDRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByID not implemented")
}
func (UnimplementedAccessAPIServer) GetBlockByHeight(context.Context, *GetBlockByHeightRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHeight not implemented")
}
func (UnimplementedAccessAPIServer) GetCollectionByID(context.Context, *GetCollectionByIDRequest) (*CollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionByID not implemented")
}
func (UnimplementedAccessAPIServer) GetFullCollectionByID(context.Context, *GetFullCollectionByIDRequest) (*FullCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullCollectionByID not implemented")
}
func (UnimplementedAccessAPIServer) SendTransaction(context.Context, *SendTransactionRequest) (*SendTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedAccessAPIServer) GetTransaction(context.Context, *GetTransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedAccessAPIServer) GetTransactionResult(context.Context, *GetTransactionRequest) (*TransactionResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionResult not implemented")
}
func (UnimplementedAccessAPIServer) GetTransactionResultByIndex(context.Context, *GetTransactionByIndexRequest) (*TransactionResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionResultByIndex not implemented")
}
func (UnimplementedAccessAPIServer) GetTransactionResultsByBlockID(context.Context, *GetTransactionsByBlockIDRequest) (*TransactionResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionResultsByBlockID not implemented")
}
func (UnimplementedAccessAPIServer) GetTransactionsByBlockID(context.Context, *GetTransactionsByBlockIDRequest) (*TransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsByBlockID not implemented")
}
func (UnimplementedAccessAPIServer) GetSystemTransaction(context.Context, *GetSystemTransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemTransaction not implemented")
}
func (UnimplementedAccessAPIServer) GetSystemTransactionResult(context.Context, *GetSystemTransactionResultRequest) (*TransactionResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemTransactionResult not implemented")
}
func (UnimplementedAccessAPIServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccessAPIServer) GetAccountAtLatestBlock(context.Context, *GetAccountAtLatestBlockRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountAtLatestBlock not implemented")
}
func (UnimplementedAccessAPIServer) GetAccountAtBlockHeight(context.Context, *GetAccountAtBlockHeightRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountAtBlockHeight not implemented")
}
func (UnimplementedAccessAPIServer) GetAccountBalanceAtLatestBlock(context.Context, *GetAccountBalanceAtLatestBlockRequest) (*AccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalanceAtLatestBlock not implemented")
}
func (UnimplementedAccessAPIServer) GetAccountBalanceAtBlockHeight(context.Context, *GetAccountBalanceAtBlockHeightRequest) (*AccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalanceAtBlockHeight not implemented")
}
func (UnimplementedAccessAPIServer) GetAccountKeysAtLatestBlock(context.Context, *GetAccountKeysAtLatestBlockRequest) (*AccountKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountKeysAtLatestBlock not implemented")
}
func (UnimplementedAccessAPIServer) GetAccountKeysAtBlockHeight(context.Context, *GetAccountKeysAtBlockHeightRequest) (*AccountKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountKeysAtBlockHeight not implemented")
}
func (UnimplementedAccessAPIServer) GetAccountKeyAtLatestBlock(context.Context, *GetAccountKeyAtLatestBlockRequest) (*AccountKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountKeyAtLatestBlock not implemented")
}
func (UnimplementedAccessAPIServer) GetAccountKeyAtBlockHeight(context.Context, *GetAccountKeyAtBlockHeightRequest) (*AccountKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountKeyAtBlockHeight not implemented")
}
func (UnimplementedAccessAPIServer) ExecuteScriptAtLatestBlock(context.Context, *ExecuteScriptAtLatestBlockRequest) (*ExecuteScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteScriptAtLatestBlock not implemented")
}
func (UnimplementedAccessAPIServer) ExecuteScriptAtBlockID(context.Context, *ExecuteScriptAtBlockIDRequest) (*ExecuteScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteScriptAtBlockID not implemented")
}
func (UnimplementedAccessAPIServer) ExecuteScriptAtBlockHeight(context.Context, *ExecuteScriptAtBlockHeightRequest) (*ExecuteScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteScriptAtBlockHeight not implemented")
}
func (UnimplementedAccessAPIServer) GetEventsForHeightRange(context.Context, *GetEventsForHeightRangeRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsForHeightRange not implemented")
}
func (UnimplementedAccessAPIServer) GetEventsForBlockIDs(context.Context, *GetEventsForBlockIDsRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventsForBlockIDs not implemented")
}
func (UnimplementedAccessAPIServer) GetNetworkParameters(context.Context, *GetNetworkParametersRequest) (*GetNetworkParametersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkParameters not implemented")
}
func (UnimplementedAccessAPIServer) GetLatestProtocolStateSnapshot(context.Context, *GetLatestProtocolStateSnapshotRequest) (*ProtocolStateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestProtocolStateSnapshot not implemented")
}
func (UnimplementedAccessAPIServer) GetProtocolStateSnapshotByBlockID(context.Context, *GetProtocolStateSnapshotByBlockIDRequest) (*ProtocolStateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtocolStateSnapshotByBlockID not implemented")
}
func (UnimplementedAccessAPIServer) GetProtocolStateSnapshotByHeight(context.Context, *GetProtocolStateSnapshotByHeightRequest) (*ProtocolStateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtocolStateSnapshotByHeight not implemented")
}
func (UnimplementedAccessAPIServer) GetExecutionResultForBlockID(context.Context, *GetExecutionResultForBlockIDRequest) (*ExecutionResultForBlockIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionResultForBlockID not implemented")
}
func (UnimplementedAccessAPIServer) GetExecutionResultByID(context.Context, *GetExecutionResultByIDRequest) (*ExecutionResultByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionResultByID not implemented")
}
func (UnimplementedAccessAPIServer) SubscribeBlocksFromStartBlockID(*SubscribeBlocksFromStartBlockIDRequest, AccessAPI_SubscribeBlocksFromStartBlockIDServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlocksFromStartBlockID not implemented")
}
func (UnimplementedAccessAPIServer) SubscribeBlocksFromStartHeight(*SubscribeBlocksFromStartHeightRequest, AccessAPI_SubscribeBlocksFromStartHeightServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlocksFromStartHeight not implemented")
}
func (UnimplementedAccessAPIServer) SubscribeBlocksFromLatest(*SubscribeBlocksFromLatestRequest, AccessAPI_SubscribeBlocksFromLatestServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlocksFromLatest not implemented")
}
func (UnimplementedAccessAPIServer) SubscribeBlockHeadersFromStartBlockID(*SubscribeBlockHeadersFromStartBlockIDRequest, AccessAPI_SubscribeBlockHeadersFromStartBlockIDServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlockHeadersFromStartBlockID not implemented")
}
func (UnimplementedAccessAPIServer) SubscribeBlockHeadersFromStartHeight(*SubscribeBlockHeadersFromStartHeightRequest, AccessAPI_SubscribeBlockHeadersFromStartHeightServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlockHeadersFromStartHeight not implemented")
}
func (UnimplementedAccessAPIServer) SubscribeBlockHeadersFromLatest(*SubscribeBlockHeadersFromLatestRequest, AccessAPI_SubscribeBlockHeadersFromLatestServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlockHeadersFromLatest not implemented")
}
func (UnimplementedAccessAPIServer) SubscribeBlockDigestsFromStartBlockID(*SubscribeBlockDigestsFromStartBlockIDRequest, AccessAPI_SubscribeBlockDigestsFromStartBlockIDServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlockDigestsFromStartBlockID not implemented")
}
func (UnimplementedAccessAPIServer) SubscribeBlockDigestsFromStartHeight(*SubscribeBlockDigestsFromStartHeightRequest, AccessAPI_SubscribeBlockDigestsFromStartHeightServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlockDigestsFromStartHeight not implemented")
}
func (UnimplementedAccessAPIServer) SubscribeBlockDigestsFromLatest(*SubscribeBlockDigestsFromLatestRequest, AccessAPI_SubscribeBlockDigestsFromLatestServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlockDigestsFromLatest not implemented")
}
func (UnimplementedAccessAPIServer) SendAndSubscribeTransactionStatuses(*SendAndSubscribeTransactionStatusesRequest, AccessAPI_SendAndSubscribeTransactionStatusesServer) error {
	return status.Errorf(codes.Unimplemented, "method SendAndSubscribeTransactionStatuses not implemented")
}

// UnsafeAccessAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessAPIServer will
// result in compilation errors.
type UnsafeAccessAPIServer interface {
	mustEmbedUnimplementedAccessAPIServer()
}

func RegisterAccessAPIServer(s grpc.ServiceRegistrar, srv AccessAPIServer) {
	s.RegisterService(&AccessAPI_ServiceDesc, srv)
}

func _AccessAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetNodeVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeVersionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetNodeVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetNodeVersionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetNodeVersionInfo(ctx, req.(*GetNodeVersionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetLatestBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestBlockHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetLatestBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetLatestBlockHeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetLatestBlockHeader(ctx, req.(*GetLatestBlockHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetBlockHeaderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHeaderByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetBlockHeaderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetBlockHeaderByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetBlockHeaderByID(ctx, req.(*GetBlockHeaderByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetBlockHeaderByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockHeaderByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetBlockHeaderByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetBlockHeaderByHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetBlockHeaderByHeight(ctx, req.(*GetBlockHeaderByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetLatestBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetLatestBlock(ctx, req.(*GetLatestBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetBlockByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetBlockByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetBlockByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetBlockByID(ctx, req.(*GetBlockByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetBlockByHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetBlockByHeight(ctx, req.(*GetBlockByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetCollectionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetCollectionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetCollectionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetCollectionByID(ctx, req.(*GetCollectionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetFullCollectionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullCollectionByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetFullCollectionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetFullCollectionByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetFullCollectionByID(ctx, req.(*GetFullCollectionByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_SendTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).SendTransaction(ctx, req.(*SendTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetTransactionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetTransactionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetTransactionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetTransactionResult(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetTransactionResultByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetTransactionResultByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetTransactionResultByIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetTransactionResultByIndex(ctx, req.(*GetTransactionByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetTransactionResultsByBlockID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByBlockIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetTransactionResultsByBlockID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetTransactionResultsByBlockID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetTransactionResultsByBlockID(ctx, req.(*GetTransactionsByBlockIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetTransactionsByBlockID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsByBlockIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetTransactionsByBlockID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetTransactionsByBlockID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetTransactionsByBlockID(ctx, req.(*GetTransactionsByBlockIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetSystemTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetSystemTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetSystemTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetSystemTransaction(ctx, req.(*GetSystemTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetSystemTransactionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemTransactionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetSystemTransactionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetSystemTransactionResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetSystemTransactionResult(ctx, req.(*GetSystemTransactionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetAccountAtLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountAtLatestBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetAccountAtLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetAccountAtLatestBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetAccountAtLatestBlock(ctx, req.(*GetAccountAtLatestBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetAccountAtBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountAtBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetAccountAtBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetAccountAtBlockHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetAccountAtBlockHeight(ctx, req.(*GetAccountAtBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetAccountBalanceAtLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalanceAtLatestBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetAccountBalanceAtLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetAccountBalanceAtLatestBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetAccountBalanceAtLatestBlock(ctx, req.(*GetAccountBalanceAtLatestBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetAccountBalanceAtBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalanceAtBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetAccountBalanceAtBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetAccountBalanceAtBlockHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetAccountBalanceAtBlockHeight(ctx, req.(*GetAccountBalanceAtBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetAccountKeysAtLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountKeysAtLatestBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetAccountKeysAtLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetAccountKeysAtLatestBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetAccountKeysAtLatestBlock(ctx, req.(*GetAccountKeysAtLatestBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetAccountKeysAtBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountKeysAtBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetAccountKeysAtBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetAccountKeysAtBlockHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetAccountKeysAtBlockHeight(ctx, req.(*GetAccountKeysAtBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetAccountKeyAtLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountKeyAtLatestBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetAccountKeyAtLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetAccountKeyAtLatestBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetAccountKeyAtLatestBlock(ctx, req.(*GetAccountKeyAtLatestBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetAccountKeyAtBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountKeyAtBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetAccountKeyAtBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetAccountKeyAtBlockHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetAccountKeyAtBlockHeight(ctx, req.(*GetAccountKeyAtBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_ExecuteScriptAtLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteScriptAtLatestBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).ExecuteScriptAtLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_ExecuteScriptAtLatestBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).ExecuteScriptAtLatestBlock(ctx, req.(*ExecuteScriptAtLatestBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_ExecuteScriptAtBlockID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteScriptAtBlockIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).ExecuteScriptAtBlockID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_ExecuteScriptAtBlockID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).ExecuteScriptAtBlockID(ctx, req.(*ExecuteScriptAtBlockIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_ExecuteScriptAtBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteScriptAtBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).ExecuteScriptAtBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_ExecuteScriptAtBlockHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).ExecuteScriptAtBlockHeight(ctx, req.(*ExecuteScriptAtBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetEventsForHeightRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsForHeightRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetEventsForHeightRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetEventsForHeightRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetEventsForHeightRange(ctx, req.(*GetEventsForHeightRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetEventsForBlockIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsForBlockIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetEventsForBlockIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetEventsForBlockIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetEventsForBlockIDs(ctx, req.(*GetEventsForBlockIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetNetworkParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetNetworkParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetNetworkParameters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetNetworkParameters(ctx, req.(*GetNetworkParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetLatestProtocolStateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestProtocolStateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetLatestProtocolStateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetLatestProtocolStateSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetLatestProtocolStateSnapshot(ctx, req.(*GetLatestProtocolStateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetProtocolStateSnapshotByBlockID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProtocolStateSnapshotByBlockIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetProtocolStateSnapshotByBlockID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetProtocolStateSnapshotByBlockID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetProtocolStateSnapshotByBlockID(ctx, req.(*GetProtocolStateSnapshotByBlockIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetProtocolStateSnapshotByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProtocolStateSnapshotByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetProtocolStateSnapshotByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetProtocolStateSnapshotByHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetProtocolStateSnapshotByHeight(ctx, req.(*GetProtocolStateSnapshotByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetExecutionResultForBlockID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionResultForBlockIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetExecutionResultForBlockID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetExecutionResultForBlockID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetExecutionResultForBlockID(ctx, req.(*GetExecutionResultForBlockIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_GetExecutionResultByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionResultByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessAPIServer).GetExecutionResultByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessAPI_GetExecutionResultByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessAPIServer).GetExecutionResultByID(ctx, req.(*GetExecutionResultByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessAPI_SubscribeBlocksFromStartBlockID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBlocksFromStartBlockIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccessAPIServer).SubscribeBlocksFromStartBlockID(m, &accessAPISubscribeBlocksFromStartBlockIDServer{stream})
}

type AccessAPI_SubscribeBlocksFromStartBlockIDServer interface {
	Send(*SubscribeBlocksResponse) error
	grpc.ServerStream
}

type accessAPISubscribeBlocksFromStartBlockIDServer struct {
	grpc.ServerStream
}

func (x *accessAPISubscribeBlocksFromStartBlockIDServer) Send(m *SubscribeBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccessAPI_SubscribeBlocksFromStartHeight_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBlocksFromStartHeightRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccessAPIServer).SubscribeBlocksFromStartHeight(m, &accessAPISubscribeBlocksFromStartHeightServer{stream})
}

type AccessAPI_SubscribeBlocksFromStartHeightServer interface {
	Send(*SubscribeBlocksResponse) error
	grpc.ServerStream
}

type accessAPISubscribeBlocksFromStartHeightServer struct {
	grpc.ServerStream
}

func (x *accessAPISubscribeBlocksFromStartHeightServer) Send(m *SubscribeBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccessAPI_SubscribeBlocksFromLatest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBlocksFromLatestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccessAPIServer).SubscribeBlocksFromLatest(m, &accessAPISubscribeBlocksFromLatestServer{stream})
}

type AccessAPI_SubscribeBlocksFromLatestServer interface {
	Send(*SubscribeBlocksResponse) error
	grpc.ServerStream
}

type accessAPISubscribeBlocksFromLatestServer struct {
	grpc.ServerStream
}

func (x *accessAPISubscribeBlocksFromLatestServer) Send(m *SubscribeBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccessAPI_SubscribeBlockHeadersFromStartBlockID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBlockHeadersFromStartBlockIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccessAPIServer).SubscribeBlockHeadersFromStartBlockID(m, &accessAPISubscribeBlockHeadersFromStartBlockIDServer{stream})
}

type AccessAPI_SubscribeBlockHeadersFromStartBlockIDServer interface {
	Send(*SubscribeBlockHeadersResponse) error
	grpc.ServerStream
}

type accessAPISubscribeBlockHeadersFromStartBlockIDServer struct {
	grpc.ServerStream
}

func (x *accessAPISubscribeBlockHeadersFromStartBlockIDServer) Send(m *SubscribeBlockHeadersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccessAPI_SubscribeBlockHeadersFromStartHeight_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBlockHeadersFromStartHeightRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccessAPIServer).SubscribeBlockHeadersFromStartHeight(m, &accessAPISubscribeBlockHeadersFromStartHeightServer{stream})
}

type AccessAPI_SubscribeBlockHeadersFromStartHeightServer interface {
	Send(*SubscribeBlockHeadersResponse) error
	grpc.ServerStream
}

type accessAPISubscribeBlockHeadersFromStartHeightServer struct {
	grpc.ServerStream
}

func (x *accessAPISubscribeBlockHeadersFromStartHeightServer) Send(m *SubscribeBlockHeadersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccessAPI_SubscribeBlockHeadersFromLatest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBlockHeadersFromLatestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccessAPIServer).SubscribeBlockHeadersFromLatest(m, &accessAPISubscribeBlockHeadersFromLatestServer{stream})
}

type AccessAPI_SubscribeBlockHeadersFromLatestServer interface {
	Send(*SubscribeBlockHeadersResponse) error
	grpc.ServerStream
}

type accessAPISubscribeBlockHeadersFromLatestServer struct {
	grpc.ServerStream
}

func (x *accessAPISubscribeBlockHeadersFromLatestServer) Send(m *SubscribeBlockHeadersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccessAPI_SubscribeBlockDigestsFromStartBlockID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBlockDigestsFromStartBlockIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccessAPIServer).SubscribeBlockDigestsFromStartBlockID(m, &accessAPISubscribeBlockDigestsFromStartBlockIDServer{stream})
}

type AccessAPI_SubscribeBlockDigestsFromStartBlockIDServer interface {
	Send(*SubscribeBlockDigestsResponse) error
	grpc.ServerStream
}

type accessAPISubscribeBlockDigestsFromStartBlockIDServer struct {
	grpc.ServerStream
}

func (x *accessAPISubscribeBlockDigestsFromStartBlockIDServer) Send(m *SubscribeBlockDigestsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccessAPI_SubscribeBlockDigestsFromStartHeight_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBlockDigestsFromStartHeightRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccessAPIServer).SubscribeBlockDigestsFromStartHeight(m, &accessAPISubscribeBlockDigestsFromStartHeightServer{stream})
}

type AccessAPI_SubscribeBlockDigestsFromStartHeightServer interface {
	Send(*SubscribeBlockDigestsResponse) error
	grpc.ServerStream
}

type accessAPISubscribeBlockDigestsFromStartHeightServer struct {
	grpc.ServerStream
}

func (x *accessAPISubscribeBlockDigestsFromStartHeightServer) Send(m *SubscribeBlockDigestsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccessAPI_SubscribeBlockDigestsFromLatest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBlockDigestsFromLatestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccessAPIServer).SubscribeBlockDigestsFromLatest(m, &accessAPISubscribeBlockDigestsFromLatestServer{stream})
}

type AccessAPI_SubscribeBlockDigestsFromLatestServer interface {
	Send(*SubscribeBlockDigestsResponse) error
	grpc.ServerStream
}

type accessAPISubscribeBlockDigestsFromLatestServer struct {
	grpc.ServerStream
}

func (x *accessAPISubscribeBlockDigestsFromLatestServer) Send(m *SubscribeBlockDigestsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AccessAPI_SendAndSubscribeTransactionStatuses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendAndSubscribeTransactionStatusesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccessAPIServer).SendAndSubscribeTransactionStatuses(m, &accessAPISendAndSubscribeTransactionStatusesServer{stream})
}

type AccessAPI_SendAndSubscribeTransactionStatusesServer interface {
	Send(*SendAndSubscribeTransactionStatusesResponse) error
	grpc.ServerStream
}

type accessAPISendAndSubscribeTransactionStatusesServer struct {
	grpc.ServerStream
}

func (x *accessAPISendAndSubscribeTransactionStatusesServer) Send(m *SendAndSubscribeTransactionStatusesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AccessAPI_ServiceDesc is the grpc.ServiceDesc for AccessAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flow.access.AccessAPI",
	HandlerType: (*AccessAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AccessAPI_Ping_Handler,
		},
		{
			MethodName: "GetNodeVersionInfo",
			Handler:    _AccessAPI_GetNodeVersionInfo_Handler,
		},
		{
			MethodName: "GetLatestBlockHeader",
			Handler:    _AccessAPI_GetLatestBlockHeader_Handler,
		},
		{
			MethodName: "GetBlockHeaderByID",
			Handler:    _AccessAPI_GetBlockHeaderByID_Handler,
		},
		{
			MethodName: "GetBlockHeaderByHeight",
			Handler:    _AccessAPI_GetBlockHeaderByHeight_Handler,
		},
		{
			MethodName: "GetLatestBlock",
			Handler:    _AccessAPI_GetLatestBlock_Handler,
		},
		{
			MethodName: "GetBlockByID",
			Handler:    _AccessAPI_GetBlockByID_Handler,
		},
		{
			MethodName: "GetBlockByHeight",
			Handler:    _AccessAPI_GetBlockByHeight_Handler,
		},
		{
			MethodName: "GetCollectionByID",
			Handler:    _AccessAPI_GetCollectionByID_Handler,
		},
		{
			MethodName: "GetFullCollectionByID",
			Handler:    _AccessAPI_GetFullCollectionByID_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _AccessAPI_SendTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _AccessAPI_GetTransaction_Handler,
		},
		{
			MethodName: "GetTransactionResult",
			Handler:    _AccessAPI_GetTransactionResult_Handler,
		},
		{
			MethodName: "GetTransactionResultByIndex",
			Handler:    _AccessAPI_GetTransactionResultByIndex_Handler,
		},
		{
			MethodName: "GetTransactionResultsByBlockID",
			Handler:    _AccessAPI_GetTransactionResultsByBlockID_Handler,
		},
		{
			MethodName: "GetTransactionsByBlockID",
			Handler:    _AccessAPI_GetTransactionsByBlockID_Handler,
		},
		{
			MethodName: "GetSystemTransaction",
			Handler:    _AccessAPI_GetSystemTransaction_Handler,
		},
		{
			MethodName: "GetSystemTransactionResult",
			Handler:    _AccessAPI_GetSystemTransactionResult_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _AccessAPI_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountAtLatestBlock",
			Handler:    _AccessAPI_GetAccountAtLatestBlock_Handler,
		},
		{
			MethodName: "GetAccountAtBlockHeight",
			Handler:    _AccessAPI_GetAccountAtBlockHeight_Handler,
		},
		{
			MethodName: "GetAccountBalanceAtLatestBlock",
			Handler:    _AccessAPI_GetAccountBalanceAtLatestBlock_Handler,
		},
		{
			MethodName: "GetAccountBalanceAtBlockHeight",
			Handler:    _AccessAPI_GetAccountBalanceAtBlockHeight_Handler,
		},
		{
			MethodName: "GetAccountKeysAtLatestBlock",
			Handler:    _AccessAPI_GetAccountKeysAtLatestBlock_Handler,
		},
		{
			MethodName: "GetAccountKeysAtBlockHeight",
			Handler:    _AccessAPI_GetAccountKeysAtBlockHeight_Handler,
		},
		{
			MethodName: "GetAccountKeyAtLatestBlock",
			Handler:    _AccessAPI_GetAccountKeyAtLatestBlock_Handler,
		},
		{
			MethodName: "GetAccountKeyAtBlockHeight",
			Handler:    _AccessAPI_GetAccountKeyAtBlockHeight_Handler,
		},
		{
			MethodName: "ExecuteScriptAtLatestBlock",
			Handler:    _AccessAPI_ExecuteScriptAtLatestBlock_Handler,
		},
		{
			MethodName: "ExecuteScriptAtBlockID",
			Handler:    _AccessAPI_ExecuteScriptAtBlockID_Handler,
		},
		{
			MethodName: "ExecuteScriptAtBlockHeight",
			Handler:    _AccessAPI_ExecuteScriptAtBlockHeight_Handler,
		},
		{
			MethodName: "GetEventsForHeightRange",
			Handler:    _AccessAPI_GetEventsForHeightRange_Handler,
		},
		{
			MethodName: "GetEventsForBlockIDs",
			Handler:    _AccessAPI_GetEventsForBlockIDs_Handler,
		},
		{
			MethodName: "GetNetworkParameters",
			Handler:    _AccessAPI_GetNetworkParameters_Handler,
		},
		{
			MethodName: "GetLatestProtocolStateSnapshot",
			Handler:    _AccessAPI_GetLatestProtocolStateSnapshot_Handler,
		},
		{
			MethodName: "GetProtocolStateSnapshotByBlockID",
			Handler:    _AccessAPI_GetProtocolStateSnapshotByBlockID_Handler,
		},
		{
			MethodName: "GetProtocolStateSnapshotByHeight",
			Handler:    _AccessAPI_GetProtocolStateSnapshotByHeight_Handler,
		},
		{
			MethodName: "GetExecutionResultForBlockID",
			Handler:    _AccessAPI_GetExecutionResultForBlockID_Handler,
		},
		{
			MethodName: "GetExecutionResultByID",
			Handler:    _AccessAPI_GetExecutionResultByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeBlocksFromStartBlockID",
			Handler:       _AccessAPI_SubscribeBlocksFromStartBlockID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBlocksFromStartHeight",
			Handler:       _AccessAPI_SubscribeBlocksFromStartHeight_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBlocksFromLatest",
			Handler:       _AccessAPI_SubscribeBlocksFromLatest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBlockHeadersFromStartBlockID",
			Handler:       _AccessAPI_SubscribeBlockHeadersFromStartBlockID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBlockHeadersFromStartHeight",
			Handler:       _AccessAPI_SubscribeBlockHeadersFromStartHeight_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBlockHeadersFromLatest",
			Handler:       _AccessAPI_SubscribeBlockHeadersFromLatest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBlockDigestsFromStartBlockID",
			Handler:       _AccessAPI_SubscribeBlockDigestsFromStartBlockID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBlockDigestsFromStartHeight",
			Handler:       _AccessAPI_SubscribeBlockDigestsFromStartHeight_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBlockDigestsFromLatest",
			Handler:       _AccessAPI_SubscribeBlockDigestsFromLatest_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendAndSubscribeTransactionStatuses",
			Handler:       _AccessAPI_SendAndSubscribeTransactionStatuses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flow/access/access.proto",
}
